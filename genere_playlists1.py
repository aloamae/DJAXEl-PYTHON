#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Assistant DJ - √âtape 5
G√©n√©rer les playlists depuis les fiches Markdown
"""

import os
import re
import sys
import json
from pathlib import Path
from datetime import datetime
import tkinter as tk
from tkinter import messagebox
from collections import defaultdict

def scan_songs_directory():
    """Scanner le dossier des chansons"""
    songs_dir = Path("data/output/chansons")
    if not songs_dir.exists():
        raise FileNotFoundError(f"Dossier des chansons non trouv√©: {songs_dir}")
    
    return list(songs_dir.glob("*.md"))

def parse_song_file(file_path):
    """Parser un fichier de chanson"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        song_info = {}
        
        # Extraire les informations de base
        patterns = {
            'titre': r'titre:\s*(.+)',
            'artiste': r'artiste:\s*(.+)',
            'bpm': r'bpm:\s*(\d+)',
            'key': r'key:\s*(.+)',
            'energie': r'energie:\s*(\d+)',
            'date_ajout': r'date_ajout:\s*(.+)'
        }
        
        for key, pattern in patterns.items():
            match = re.search(pattern, content)
            if match:
                song_info[key] = match.group(1).strip()
        
        # Extraire les genres
        genre_section = re.search(r'genre:\s*\n((?:\s*-\s*.+\n?)+)', content)
        if genre_section:
            genres = []
            for line in genre_section.group(1).split('\n'):
                line = line.strip()
                if line.startswith('- '):
                    genres.append(line[2:].strip())
            song_info['genres'] = genres
        else:
            song_info['genres'] = ['Non class√©']
        
        # Extraire les tags
        tags_section = re.search(r'tags:\s*\n((?:\s*-\s*.+\n?)+)', content)
        if tags_section:
            tags = []
            for line in tags_section.group(1).split('\n'):
                line = line.strip()
                if line.startswith('- '):
                    tags.append(line[2:].strip())
            song_info['tags'] = tags
        else:
            song_info['tags'] = []
        
        # Extraire le fichier MP3
        mp3_match = re.search(r'fichier_mp3:\s*\[\[(.+?)\]\]', content)
        if mp3_match:
            song_info['fichier_mp3'] = mp3_match.group(1).strip()
        
        song_info['file_path'] = file_path
        return song_info
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du parsing de {file_path}: {str(e)}")
        return None

def generate_m3u_playlist(songs, playlist_name, output_dir):
    """G√©n√©rer une playlist M3U"""
    try:
        playlist_path = Path(output_dir) / f"{playlist_name}.m3u"
        
        with open(playlist_path, 'w', encoding='utf-8') as f:
            f.write("#EXTM3U\n")
            f.write(f"# Playlist: {playlist_name}\n")
            f.write(f"# G√©n√©r√©e le: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"# Nombre de morceaux: {len(songs)}\n\n")
            
            for song in songs:
                title = song.get('titre', 'Titre inconnu')
                artist = song.get('artiste', 'Artiste inconnu')
                fichier_mp3 = song.get('fichier_mp3', f"mp3/{artist} - {title}.mp3")
                
                f.write(f"#EXTINF:-1,{artist} - {title}\n")
                f.write(f"{fichier_mp3}\n\n")
        
        return playlist_path
        
    except Exception as e:
        raise Exception(f"Erreur lors de la g√©n√©ration M3U: {str(e)}")

def generate_json_playlist(songs, playlist_name, output_dir):
    """G√©n√©rer une playlist JSON"""
    try:
        playlist_path = Path(output_dir) / f"{playlist_name}.json"
        
        playlist_data = {
            "name": playlist_name,
            "created": datetime.now().isoformat(),
            "total_songs": len(songs),
            "songs": []
        }
        
        for song in songs:
            song_data = {
                "title": song.get('titre', 'Titre inconnu'),
                "artist": song.get('artiste', 'Artiste inconnu'),
                "bpm": int(song.get('bpm', 120)),
                "key": song.get('key', 'A'),
                "energy": int(song.get('energie', 5)),
                "genres": song.get('genres', ['Non class√©']),
                "tags": song.get('tags', []),
                "file_path": song.get('fichier_mp3', ''),
                "date_added": song.get('date_ajout', '')
            }
            playlist_data["songs"].append(song_data)
        
        with open(playlist_path, 'w', encoding='utf-8') as f:
            json.dump(playlist_data, f, ensure_ascii=False, indent=2)
        
        return playlist_path
        
    except Exception as e:
        raise Exception(f"Erreur lors de la g√©n√©ration JSON: {str(e)}")

def generate_markdown_playlist(songs, playlist_name, output_dir):
    """G√©n√©rer une playlist Markdown"""
    try:
        playlist_path = Path(output_dir) / f"{playlist_name}.md"
        
        with open(playlist_path, 'w', encoding='utf-8') as f:
            f.write(f"# Playlist: {playlist_name}\n\n")
            f.write(f"**Cr√©√©e le:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**Nombre de morceaux:** {len(songs)}\n\n")
            
            # Statistiques
            genres = defaultdict(int)
            bpms = []
            energies = []
            
            for song in songs:
                for genre in song.get('genres', ['Non class√©']):
                    genres[genre] += 1
                try:
                    bpms.append(int(song.get('bpm', 120)))
                    energies.append(int(song.get('energie', 5)))
                except ValueError:
                    pass
            
            f.write("## üìä Statistiques\n\n")
            f.write("### Genres\n")
            for genre, count in sorted(genres.items()):
                f.write(f"- {genre}: {count} morceaux\n")
            
            if bpms:
                f.write(f"\n### BPM\n")
                f.write(f"- Moyenne: {sum(bpms) // len(bpms)} BPM\n")
                f.write(f"- Min: {min(bpms)} BPM\n")
                f.write(f"- Max: {max(bpms)} BPM\n")
            
            if energies:
                f.write(f"\n### √ânergie\n")
                f.write(f"- Moyenne: {sum(energies) // len(energies)}/10\n")
                f.write(f"- Min: {min(energies)}/10\n")
                f.write(f"- Max: {max(energies)}/10\n")
            
            f.write("\n## üéµ Morceaux\n\n")
            
            for i, song in enumerate(songs, 1):
                title = song.get('titre', 'Titre inconnu')
                artist = song.get('artiste', 'Artiste inconnu')
                bpm = song.get('bpm', 'N/A')
                key = song.get('key', 'N/A')
                energy = song.get('energie', 'N/A')
                genres_str = ', '.join(song.get('genres', ['Non class√©']))
                
                f.write(f"### {i}. {artist} - {title}\n\n")
                f.write(f"- **BPM:** {bpm}\n")
                f.write(f"- **Cl√©:** {key}\n")
                f.write(f"- **√ânergie:** {energy}/10\n")
                f.write(f"- **Genres:** {genres_str}\n")
                f.write(f"- **Fichier:** `{song.get('fichier_mp3', '')}`\n\n")
        
        return playlist_path
        
    except Exception as e:
        raise Exception(f"Erreur lors de la g√©n√©ration Markdown: {str(e)}")

def create_playlists_by_genre(songs, output_dir):
    """Cr√©er des playlists par genre"""
    playlists = []
    genre_groups = defaultdict(list)
    
    for song in songs:
        for genre in song.get('genres', ['Non class√©']):
            genre_groups[genre].append(song)
    
    for genre, genre_songs in genre_groups.items():
        if len(genre_songs) >= 2:  # Minimum 2 chansons pour cr√©er une playlist
            playlist_name = f"Playlist_{genre.replace(' ', '_')}"
            
            # Trier par BPM puis par √©nergie
            sorted_songs = sorted(genre_songs, key=lambda x: (
                int(x.get('bpm', 120)),
                int(x.get('energie', 5))
            ))
            
            # G√©n√©rer les formats
            m3u_path = generate_m3u_playlist(sorted_songs, playlist_name, output_dir)
            json_path = generate_json_playlist(sorted_songs, playlist_name, output_dir)
            md_path = generate_markdown_playlist(sorted_songs, playlist_name, output_dir)
            
            playlists.append({
                'name': playlist_name,
                'genre': genre,
                'songs_count': len(sorted_songs),
                'files': [m3u_path, json_path, md_path]
            })
    
    return playlists

def create_playlists_by_energy(songs, output_dir):
    """Cr√©er des playlists par niveau d'√©nergie"""
    playlists = []
    energy_groups = defaultdict(list)
    
    for song in songs:
        try:
            energy = int(song.get('energie', 5))
            if energy <= 3:
                energy_groups['Low_Energy'].append(song)
            elif energy <= 6:
                energy_groups['Medium_Energy'].append(song)
            else:
                energy_groups['High_Energy'].append(song)
        except ValueError:
            energy_groups['Unknown_Energy'].append(song)
    
    for energy_level, energy_songs in energy_groups.items():
        if len(energy_songs) >= 2:
            playlist_name = f"Playlist_{energy_level}"
            
            # Trier par BPM
            sorted_songs = sorted(energy_songs, key=lambda x: int(x.get('bpm', 120)))
            
            # G√©n√©rer les formats
            m3u_path = generate_m3u_playlist(sorted_songs, playlist_name, output_dir)
            json_path = generate_json_playlist(sorted_songs, playlist_name, output_dir)
            md_path = generate_markdown_playlist(sorted_songs, playlist_name, output_dir)
            
            playlists.append({
                'name': playlist_name,
                'energy_level': energy_level,
                'songs_count': len(sorted_songs),
                'files': [m3u_path, json_path, md_path]
            })
    
    return playlists

def main():
    """Fonction principale"""
    print("üéµ Assistant DJ - √âtape 5: G√©n√©ration des playlists")
    print("="*60)
    
    try:
        # Scanner les fichiers de chansons
        song_files = scan_songs_directory()
        print(f"üìÅ Fichiers trouv√©s: {len(song_files)}")
        
        if not song_files:
            raise Exception("Aucun fichier de chanson trouv√© dans data/output/chansons/")
        
        # Parser les fichiers
        songs = []
        for file_path in song_files:
            song = parse_song_file(file_path)
            if song:
                songs.append(song)
        
        print(f"üéµ Chansons analys√©es: {len(songs)}")
        
        # Cr√©er le dossier de sortie
        output_dir = "data/playlists"
        Path(output_dir).mkdir(parents=True, exist_ok=True)
        
        # Cr√©er les playlists par genre
        print("üé∂ G√©n√©ration des playlists par genre...")
        genre_playlists = create_playlists_by_genre(songs, output_dir)
        
        # Cr√©er les playlists par √©nergie
        print("‚ö° G√©n√©ration des playlists par √©nergie...")
        energy_playlists = create_playlists_by_energy(songs, output_dir)
        
        # Cr√©er une playlist compl√®te
        print("üìã G√©n√©ration de la playlist compl√®te...")
        complete_playlist = "Playlist_Complete"
        all_songs = sorted(songs, key=lambda x: (
            x.get('artiste', 'Artiste inconnu'),
            x.get('titre', 'Titre inconnu')
        ))
        
        complete_m3u = generate_m3u_playlist(all_songs, complete_playlist, output_dir)
        complete_json = generate_json_playlist(all_songs, complete_playlist, output_dir)
        complete_md = generate_markdown_playlist(all_songs, complete_playlist, output_dir)
        
        # R√©sum√©
        total_playlists = len(genre_playlists) + len(energy_playlists) + 1
        
        print(f"‚úÖ G√©n√©ration termin√©e avec succ√®s!")
        print(f"üìÅ Dossier de sortie: {output_dir}")
        print(f"üéµ Morceaux trait√©s: {len(songs)}")
        print(f"üìã Playlists g√©n√©r√©es: {total_playlists}")
        print(f"  - Par genre: {len(genre_playlists)}")
        print(f"  - Par √©nergie: {len(energy_playlists)}")
        print(f"  - Compl√®te: 1")
        
        # Afficher le d√©tail
        print("\nüìã D√©tail des playlists:")
        for playlist in genre_playlists:
            print(f"  üé∂ {playlist['name']}: {playlist['songs_count']} morceaux")
        for playlist in energy_playlists:
            print(f"  ‚ö° {playlist['name']}: {playlist['songs_count']} morceaux")
        print(f"  üìã {complete_playlist}: {len(all_songs)} morceaux")
        
        # Afficher message de succ√®s
        if 'tkinter' in sys.modules:
            messagebox.showinfo("Succ√®s", f"Playlists g√©n√©r√©es!\n\nMorceaux: {len(songs)}\nPlaylists: {total_playlists}\nDossier: {output_dir}")
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        if 'tkinter' in sys.modules:
            messagebox.showerror("Erreur", f"Erreur lors de la g√©n√©ration:\n{str(e)}")

if __name__ == "__main__":
    main()